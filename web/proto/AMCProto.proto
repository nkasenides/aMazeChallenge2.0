/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Framework: http://nkasenides.github.io/athlos
  Generated on: 25-09-2021 13:52:52
  Athlos Project Editor, v0.1.0 BETA
-------------------------------------------------------------------------------- */

syntax = "proto3";
package org.inspirecenter.amazechallenge.proto;
option java_package = "org.inspirecenter.amazechallenge.proto";
option java_outer_classname = "AMCProto";
option java_multiple_files = true;
//--------------------------------------------------------------------------------
//-- CUSTOM TYPES

message GameProto {
  repeated string finishedPlayers = 1;
  repeated string activePlayers = 2;
  repeated PickableEntityProto pickables = 3;
  repeated string queuedPlayers = 4;
  uint64 counter = 5;
  repeated string waitingPlayers = 6;
  map<string,AMCPlayerProto> allPlayers = 7;
  uint64 lastUpdated = 8;
  string challengeID = 9;
  map<string,PlayerEntityProto> playerEntities = 10;
  string id = 11;
  uint64 lastExecutionTime = 12;
  map<string,AMCWorldSessionProto> playerWorldSessions = 13;
}

message HealthProto {
  int32 health = 1;
}

message AdminKeyProto {
  string id = 1;
}

message GridProto {
  Direction4 startingDirection = 1;
  string data = 2;
  MatrixPositionProto targetPosition = 3;
  int32 width = 4;
  MatrixPositionProto startingPosition = 5;
  int32 height = 6;
}

message QuestionnaireEntryProto {
  string challengeID = 1;
  repeated QuestionEntryProto questionEntry = 2;
  string id = 3;
  string participantName = 4;
  string participantEmail = 5;
}

message QuestionEntryProto {
  string answerText = 1;
  string id = 2;
  string questionText = 3;
}

message EventQueueProto {
  string id = 1;
  map<uint64,Audio> events = 2;
  string playerID = 3;
}

message ChallengeProto {
  bool canJoinAfterStart = 1;
  bool canStepOnEachOther = 2;
  PickableIntensity penalties = 3;
  BackgroundImage backgroundImage = 4;
  string description = 5;
  string lineColor = 6;
  bool canRepeat = 7;
  uint64 createdOn = 8;
  bool hasQuestionnaire = 9;
  Difficulty difficulty = 10;
  int32 apiVersion = 11;
  int32 maxActivePlayers = 12;
  GridProto grid = 13;
  Audio backgroundAudio = 14;
  int32 minActivePlayers = 15;
  string name = 16;
  uint64 startTime = 17;
  uint64 endTime = 18;
  string id = 19;
  PickableIntensity rewards = 20;
  string createdByID = 21;
  Algorithm algorithm = 22;
}

//--------------------------------------------------------------------------------
//-- CUSTOM ENUMS

enum LikertResponse {
  POSITIVE_LikertResponse = 0;
  NEGATIVE_LikertResponse = 1;
  NEUTRAL_LikertResponse = 2;
  VERY_POSITIVE_LikertResponse = 3;
  VERY_NEGATIVE_LikertResponse = 4;
}

enum Shape {
  TRIANGLE_Shape = 0;
  EMPTY_CIRCLE_Shape = 1;
  CIRCLE_Shape = 2;
}

enum AmazeIcon {
  ICON_9_AmazeIcon = 0;
  ICON_8_AmazeIcon = 1;
  ICON_7_AmazeIcon = 2;
  ICON_6_AmazeIcon = 3;
  ICON_5_AmazeIcon = 4;
  ICON_4_AmazeIcon = 5;
  ICON_3_AmazeIcon = 6;
  ICON_2_AmazeIcon = 7;
  ICON_1_AmazeIcon = 8;
  ICON_10_AmazeIcon = 9;
}

enum Difficulty {
  EASY_Difficulty = 0;
  MEDIUM_Difficulty = 1;
  HARD_Difficulty = 2;
  VERY_EASY_Difficulty = 3;
  VERY_HARD_Difficulty = 4;
}

enum Bias {
  PENALTY_Bias = 0;
  NONE_Bias = 1;
  REWARD_Bias = 2;
}

enum DichotomousResponse {
  NO_DichotomousResponse = 0;
  MAYBE_DichotomousResponse = 1;
  YES_DichotomousResponse = 2;
}

enum PickableCategory {
  FRUIT_PickableCategory = 0;
  SNACK_PickableCategory = 1;
  NONE_PickableCategory = 2;
}

enum Algorithm {
  MANY_SOLUTIONS_Algorithm = 0;
  SPARSE_Algorithm = 1;
  SINGLE_SOLUTION_Algorithm = 2;
  EMPTY_Algorithm = 3;
}

enum AmazeColor {
  GOLD_AmazeColor = 0;
  BLUE_AmazeColor = 1;
  PURPLE_AmazeColor = 2;
  GREEN_AmazeColor = 3;
  DARK_BLUE_AmazeColor = 4;
  INDIGO_AmazeColor = 5;
  RED_AmazeColor = 6;
  LIGHT_GREY_AmazeColor = 7;
  PINK_AmazeColor = 8;
  LIME_AmazeColor = 9;
  DARK_RED_AmazeColor = 10;
  DARK_GREY_AmazeColor = 11;
  BLACK_AmazeColor = 12;
  MAGENTA_AmazeColor = 13;
  YELLOW_AmazeColor = 14;
  DARK_GREEN_AmazeColor = 15;
  TEAL_AmazeColor = 16;
  CYAN_AmazeColor = 17;
  GREY_AmazeColor = 18;
  ORANGE_AmazeColor = 19;
}

enum BackgroundImage {
  TEXTURE_WATER_BackgroundImage = 0;
  TEXTURE_ROCKY_BackgroundImage = 1;
  TEXTURE_SPACE_BackgroundImage = 2;
  TEXTURE_METAL_BackgroundImage = 3;
  TEXTURE_MOON_BackgroundImage = 4;
  TEXTURE_LAVA_BackgroundImage = 5;
  TEXTURE_GRAVEL_BackgroundImage = 6;
  TEXTURE_WOOD_BackgroundImage = 7;
  TEXTURE_GRASS_BackgroundImage = 8;
  TEXTURE_TILES_BackgroundImage = 9;
}

enum Language {
  ENGLISH_Language = 0;
  GREEK_Language = 1;
}

enum AudioType {
  AMBIENT_AudioType = 0;
  NONE_AudioType = 1;
  EVENT_AudioType = 2;
}

enum AudioFormat {
  MP4_AudioFormat = 0;
  MP3_AudioFormat = 1;
  UNDEFINED_FORMAT_AudioFormat = 2;
  WAV_AudioFormat = 3;
  OGG_AudioFormat = 4;
}

enum Audio {
  EVENT_GIFTBOX_Audio = 0;
  EVENT_COIN20_Audio = 1;
  AMBIENT_STORM_Audio = 2;
  EVENT_TRAP_Audio = 3;
  AMBIENT_NIGHT_Audio = 4;
  AMBIENT_SNOW_Audio = 5;
  AMBIENT_ALPINE_FOREST_Audio = 6;
  EVENT_FOOD_Audio = 7;
  AMBIENT_RIVER_Audio = 8;
  EVENT_BOMB_Audio = 9;
  EVENT_SPEEDHACK_Audio = 10;
  AUDIO_NONE_Audio = 11;
  EVENT_COIN5_Audio = 12;
  EVENT_COIN10_Audio = 13;
  AMBIENT_CAVE_Audio = 14;
  AMBIENT_PRISON_Audio = 15;
  AMBIENT_SANDSTORM_Audio = 16;
  EVENT_LOSE_Audio = 17;
  AMBIENT_CITY_Audio = 18;
  AMBIENT_STREET_Audio = 19;
  AMBIENT_TROPICAL_FOREST_Audio = 20;
  AMBIENT_FIRE_Audio = 21;
  EVENT_WIN_Audio = 22;
  AMBIENT_HIGHTECH_Audio = 23;
  AMBIENT_UNDERWATER_Audio = 24;
}

enum PickableType {
  GRAPES_PickableType = 0;
  APPLE_PickableType = 1;
  TRAP_PickableType = 2;
  WATERMELON_PickableType = 3;
  SPEEDHACK_PickableType = 4;
  COIN_10_PickableType = 5;
  COIN_20_PickableType = 6;
  PEACH_PickableType = 7;
  GIFTBOX_PickableType = 8;
  COIN_5_PickableType = 9;
  BANANA_PickableType = 10;
  BOMB_PickableType = 11;
  STRAWBERRY_PickableType = 12;
  ORANGE_PickableType = 13;
}

enum MultipleChoiceResponse {
  CHOICE_1_MultipleChoiceResponse = 0;
  CHOICE_4_MultipleChoiceResponse = 1;
  CHOICE_2_MultipleChoiceResponse = 2;
  CHOICE_3_MultipleChoiceResponse = 3;
}

enum BackgroundImageType {
  JPG_BackgroundImageType = 0;
  GIF_BackgroundImageType = 1;
  PNG_BackgroundImageType = 2;
}

enum PickableIntensity {
  HIGH_PickableIntensity = 0;
  MEDIUM_PickableIntensity = 1;
  LOW_PickableIntensity = 2;
  NONE_PickableIntensity = 3;
}

//--------------------------------------------------------------------------------
//-- ATHLOS GAME MODEL

message GeoPositionProto {
  float x = 1;
  float y = 2;
  float z = 3;
  string positionHash = 4;
}

message MatrixPositionProto {
  sint32 row = 1;
  sint32 col = 2;
  string cellHash = 3;
  string chunkHash = 4;
}

enum Direction4 {
  NORTH = 0;
  EAST = 1;
  SOUTH = 2;
  WEST = 3;
}

enum Direction6 {
  NORTH6 = 0;
  NORTH_EAST = 1;
  SOUTH_EAST = 2;
  SOUTH6 = 3;
  SOUTH_WEST = 4;
  NORTH_WEST = 5;
}

enum Rotation {
  CLOCKWISE = 0;
  COUNTER_CLOCKWISE = 1;
}

enum Movement4 {
  FORWARD = 0;
  BACKWARD = 1;
  LEFTWARD = 2;
  RIGHTWARD = 3;
}

enum Movement6 {
  FORWARD6 = 0;
  FORWARD_RIGHT = 1;
  BACKWARD_RIGHT = 2;
  BACKWARD6 = 3;
  BACKWARD_LEFT = 4;
  FORWARD_LEFT = 5;
}

enum WorldType {
  UNIFORM = 0;
  TILE_SQUARE = 1;
  TILE_HEX = 2;
}

message AMCGameSessionProto {
  string ipAddress = 1;
  uint64 expiresOn = 2;
  string id = 3;
  uint64 createdOn = 4;
  string playerID = 5;
}

message AMCWorldSessionProto {
  string code = 1;
  string worldID = 2;
  string ipAddress = 3;
  MatrixPositionProto cameraPosition = 4;
  HealthProto health = 5;
  uint64 expiresOn = 6;
  string id = 7;
  string installationID = 8;
  uint64 createdOn = 9;
  string playerID = 10;
  int32 points = 11;
}

message AMCPlayerProto {
  string password = 1;
  AmazeColor color = 2;
  string teamID = 3;
  string name = 4;
  AmazeIcon icon = 5;
  string id = 6;
  uint64 createdOn = 7;
  string email = 8;
}

message AMCTeamProto {
  string name = 1;
  string id = 2;
  string ownerID = 3;
  repeated string playerIDs = 4;
  uint32 playerLimit = 5;
}

//- Entities:

message AMCEntityProto {
  string worldID = 1;
  float areaOfInterest = 2;
  string id = 3;
  MatrixPositionProto position = 4;
  string playerID = 5;
  Direction4 direction = 6;
  oneof entity {
    PickableEntityProto pickableEntity = 7;
    PlayerEntityProto playerEntity = 8;
  }
}

message PickableEntityProto {
  string worldID = 1;
  float areaOfInterest = 2;
  PickableType pickableType = 3;
  string id = 4;
  MatrixPositionProto position = 5;
  int32 state = 6;
  string playerID = 7;
  Direction4 direction = 8;
}

message PlayerEntityProto {
  string worldID = 9;
  float areaOfInterest = 10;
  string id = 11;
  MatrixPositionProto position = 12;
  string playerID = 13;
  Direction4 direction = 14;
}

//- Actions:

message AMCActionProto {
}

message AMCTerrainCellProto {
  MatrixPositionProto position = 1;
  bool rightWall = 2;
  bool downWall = 3;
  bool upWall = 4;
  bool leftWall = 5;
}

message AMCStateUpdateProto {
  AMCPartialStateProto partialState = 1;
  string worldSessionID = 2;
  repeated string removedEntities = 3;
  repeated string removedTerrain = 4;
  map<string,AMCWorldSessionProto> worldSessions = 5;
  repeated Audio events = 6;
  uint64 timestamp = 7;
  map<string,AMCPlayerProto> allPlayers = 8;
}

message AMCTerrainChunkProto {
  string id = 1;
  string worldID = 2;
  MatrixPositionProto position = 3;
  map<string, AMCTerrainCellProto> cells = 4;
}

message AMCTerrainIdentifierProto {
  string id = 1;
  string chunkID = 2;
  string worldID = 3;
  MatrixPositionProto chunkPosition = 4;
}

message AMCPartialStateProto {
  repeated string activePlayers = 1;
  map<string,AMCEntityProto> entities = 2;
  GridProto grid = 3;
  map<string,AMCPlayerProto> players = 4;
  map<string,AMCWorldSessionProto> worldSessions = 5;
  AMCWorldSessionProto worldSession = 6;
  repeated string queuedPlayers = 7;
  repeated string waitingPlayers = 8;
  map<string,AMCTerrainCellProto> terrain = 9;
  map<uint64,Audio> events = 10;
  uint64 timestamp = 11;
}

message AMCWorldProto {
  sint64 maxRows = 1;
  uint32 heightLimit = 2;
  sint64 seed = 3;
  GridProto grid = 4;
  string name = 5;
  repeated string chunkIDs = 6;
  string id = 7;
  string ownerID = 8;
  uint64 createdOn = 9;
  sint64 maxCols = 10;
  repeated string subscribedSessionIDs = 11;
}

//--------------------------------------------------------------------------------
//- Requests:

message Request {
  oneof request {
    AddChallengeRequest addChallengeRequest = 1;
    GetStateRequest getStateRequest = 2;
    RuntimeRequest runtimeRequest = 3;
    SubscribeRequest subscribeRequest = 4;
    LeaveChallengeRequest leaveChallengeRequest = 5;
    ListChallengesRequest listChallengesRequest = 6;
    UnsubscribeRequest unsubscribeRequest = 7;
    SubmitCodeRequest submitCodeRequest = 8;
    UpdateStateRequest updateStateRequest = 9;
    JoinChallengeRequest joinChallengeRequest = 10;
    SubmitQuestionnaireRequest submitQuestionnaireRequest = 11;
  }
}

message AddChallengeRequest {
  ChallengeProto challenge = 1;
  string adminKey = 2;
}

message GetStateRequest {
  string worldSessionID = 1;
}

message RuntimeRequest {
  string gameID = 1;
  string challengeID = 2;
  string adminKey = 3;
}

message SubscribeRequest {
  string worldSessionID = 1;
}

message LeaveChallengeRequest {
  string challengeID = 1;
  string worldSessionID = 2;
}

message ListChallengesRequest {
}

message UnsubscribeRequest {
  string worldSessionID = 1;
}

message SubmitCodeRequest {
  string code = 1;
  string worldSessionID = 2;
}

message UpdateStateRequest {
  string worldSessionID = 1;
}

message JoinChallengeRequest {
  string challengeID = 1;
  string installationID = 2;
  AMCPlayerProto player = 3;
}

message SubmitQuestionnaireRequest {
  string worldSessionID = 1;
  QuestionnaireEntryProto questionnaireEntry = 2;
}

//--------------------------------------------------------------------------------
//- Responses:

message Response {
  oneof response {
    SubmitQuestionnaireResponse submitQuestionnaireResponse = 1;
    GetStateResponse getStateResponse = 2;
    JoinChallengeResponse joinChallengeResponse = 3;
    UpdateStateResponse updateStateResponse = 4;
    SubmitCodeResponse submitCodeResponse = 5;
    SubscribeResponse subscribeResponse = 6;
    UnsubscribeResponse unsubscribeResponse = 7;
    RuntimeResponse runtimeResponse = 8;
    LeaveChallengeResponse leaveChallengeResponse = 9;
    ListChallengesResponse listChallengesResponse = 10;
    AddChallengeResponse addChallengeResponse = 11;
  }
}

message SubmitQuestionnaireResponse {
  enum Status {
    CANNOT_SUBMIT = 0;
    DATA_ERROR = 1;
    OK = 2;
  }
  string message = 1;
  Status status = 2;
}

message GetStateResponse {
  enum Status {
    SERVER_ERROR = 0;
    NO_SUCH_WORLD_SESSION = 1;
    INVALID_DATA = 2;
    NOT_AUTHORIZED = 3;
    CANNOT_COMPOSE_STATE = 4;
    OK = 5;
  }
  AMCPartialStateProto partialState = 1;
  string message = 2;
  Status status = 3;
}

message JoinChallengeResponse {
  enum Status {
    INVALID_CHALLENGE = 0;
    CHALLENGE_NOT_STARTED = 1;
    INVALID_PLAYER = 2;
    PLAYER_NAME_EXISTS = 3;
    CHALLENGE_OVER = 4;
    OK = 5;
    CHALLENGE_FULL = 6;
  }
  ChallengeProto challenge = 1;
  AMCWorldSessionProto worldSession = 2;
  string message = 3;
  Status status = 4;
}

message UpdateStateResponse {
  enum Status {
    SERVER_ERROR = 0;
    NO_SUCH_WORLD_SESSION = 1;
    INVALID_DATA = 2;
    NOT_AUTHORIZED = 3;
    CANNOT_COMPOSE_STATE = 4;
    OK = 5;
  }
  string message = 1;
  AMCStateUpdateProto stateUpdate = 2;
  Status status = 3;
}

message SubmitCodeResponse {
  enum Status {
    INVALID_WORLD_SESSION = 0;
    INVALID_CODE = 1;
    OK = 2;
    CANNOT_SUBMIT_CODE = 3;
  }
  string message = 1;
  Status status = 2;
}

message SubscribeResponse {
  enum Status {
    SERVER_ERROR = 0;
    NO_SUCH_WORLD_SESSION = 1;
    INVALID_DATA = 2;
    NOT_AUTHORIZED = 3;
    CANNOT_COMPOSE_STATE = 4;
    OK = 5;
  }
  AMCPartialStateProto partialState = 1;
  string message = 2;
  Status status = 3;
}

message UnsubscribeResponse {
  enum Status {
    SERVER_ERROR = 0;
    NO_SUCH_WORLD_SESSION = 1;
    INVALID_DATA = 2;
    NOT_AUTHORIZED = 3;
    OK = 4;
  }
  string message = 1;
  Status status = 2;
}

message RuntimeResponse {
  enum Status {
    INVALID_GAME = 0;
    INVALID_CHALLENGE = 1;
    INVALID_ADMIN_KEY = 2;
    ERROR = 3;
    OK = 4;
  }
  string message = 1;
  Status status = 2;
}

message LeaveChallengeResponse {
  enum Status {
    INVALID_WORLD_SESSION = 0;
    INVALID_CHALLENGE = 1;
    CANNOT_LEAVE_CHALLENGE = 2;
    OK = 3;
  }
  string message = 1;
  Status status = 2;
}

message ListChallengesResponse {
  enum Status {
    SERVER_ERROR = 0;
    NO_CHALLENGES = 1;
    OK = 2;
  }
  repeated ChallengeProto challenges = 1;
  map<string,uint32> activePlayersByChallenge = 2;
  string message = 3;
  Status status = 4;
}

message AddChallengeResponse {
  enum Status {
    INVALID_CHALLENGE = 0;
    SERVER_ERROR = 1;
    OK = 2;
    INVALID_CREDENTIALS = 3;
  }
  string message = 1;
  Status status = 2;
}

//--------------------------------------------------------------------------------
