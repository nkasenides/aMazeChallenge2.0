/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Framework: http://nkasenides.github.io/athlos
  Generated on: 17-08-2021 12:37:25
  Athlos Project Editor, v0.1.0 BETA
-------------------------------------------------------------------------------- */

package org.inspirecenter.amazechallenge.client.stubs;

import org.inspirecenter.amazechallenge.client.SimulationClient;

import java.util.HashMap;

public final class Stubs {

//    public static final String BASE_URL = "http://localhost:8080"; //Testing ONLY
    public static final String BASE_URL = "https://amazechallenge2.oa.r.appspot.com"; //Deployment

    public static class Actions {
    }


    private static final HashMap<String, SubmitQuestionnaire> submitQuestionnaireStubMap = new HashMap<>();

    public static SubmitQuestionnaire submitQuestionnaireStub(SimulationClient client) {
        if (submitQuestionnaireStubMap.get(client.getPlayer().getId()) == null) {
            final SubmitQuestionnaire stub = new SubmitQuestionnaire();
            submitQuestionnaireStubMap.put(client.getPlayer().getId(), stub);
        }
        return submitQuestionnaireStubMap.get(client.getPlayer().getId());
    }


    private static final HashMap<String, ListChallenges> listChallengesStubMap = new HashMap<>();

    public static ListChallenges listChallengesStub(SimulationClient client) {
        if (listChallengesStubMap.get(client.getPlayer().getId()) == null) {
            final ListChallenges stub = new ListChallenges();
            listChallengesStubMap.put(client.getPlayer().getId(), stub);
            return stub;
        }
        return listChallengesStubMap.get(client.getPlayer().getId());
    }


    private static final HashMap<String, SubmitCode> submitCodeStubMap = new HashMap<>();

    public static SubmitCode submitCodeStub(SimulationClient client) {
        if (submitCodeStubMap.get(client.getPlayer().getId()) == null) {
            final SubmitCode stub = new SubmitCode();
            submitCodeStubMap.put(client.getPlayer().getId(), stub);
            return stub;
        }
        return submitCodeStubMap.get(client.getPlayer().getId());
    }


    private static final HashMap<String, JoinChallenge> joinChallengeStubMap = new HashMap<>();

    public static JoinChallenge joinChallengeStub(SimulationClient client) {
        if (joinChallengeStubMap.get(client.getPlayer().getId()) == null) {
            final JoinChallenge stub = new JoinChallenge();
            joinChallengeStubMap.put(client.getPlayer().getId(), stub);
            return stub;
        }
        return joinChallengeStubMap.get(client.getPlayer().getId());
    }


    private static final HashMap<String, GetState> getStateStubMap = new HashMap<>();

    public static GetState getStateStub(SimulationClient client) {
        if (getStateStubMap.get(client.getPlayer().getId()) == null) {
            final GetState stub = new GetState();
            getStateStubMap.put(client.getPlayer().getId(), stub);
            return stub;
        }
        return getStateStubMap.get(client.getPlayer().getId());
    }


    private static final HashMap<String, UpdateState> updateStateStubMap = new HashMap<>();

    public static UpdateState updateStateStub(SimulationClient client) {
        if (updateStateStubMap.get(client.getPlayer().getId()) == null) {
            final UpdateState stub = new UpdateState();
            updateStateStubMap.put(client.getPlayer().getId(), stub);
            return stub;
        }
        return updateStateStubMap.get(client.getPlayer().getId());
    }

    private static final HashMap<String, LeaveChallenge> leaveChallengeStubMap = new HashMap<>();

    public static LeaveChallenge leaveChallengeStub(SimulationClient client) {
        if (leaveChallengeStubMap.get(client.getPlayer().getId()) == null) {
            final LeaveChallenge stub = new LeaveChallenge();
            leaveChallengeStubMap.put(client.getPlayer().getId(), stub);
            return stub;
        }
        return leaveChallengeStubMap.get(client.getPlayer().getId());
    }


    private static final HashMap<String, Subscribe> subscribeStubMap = new HashMap<>();

    public static Subscribe subscribeStub(SimulationClient client) {
        if (subscribeStubMap.get(client.getPlayer().getId()) == null) {
            final Subscribe stub = new Subscribe();
            subscribeStubMap.put(client.getPlayer().getId(), stub);
        }
        return subscribeStubMap.get(client.getPlayer().getId());
    }


    private static final HashMap<String, Unsubscribe> unsubscribeStubMap = new HashMap<>();

    public static Unsubscribe unsubscribeStub(SimulationClient client) {
        if (unsubscribeStubMap.get(client.getPlayer().getId()) == null) {
            final Unsubscribe stub = new Unsubscribe();
            unsubscribeStubMap.put(client.getPlayer().getId(), stub);
        }
        return unsubscribeStubMap.get(client.getPlayer().getId());
    }


    private static final HashMap<String, AddChallenge> addChallengeStubMap = new HashMap<>();

    public static AddChallenge addChallengeStub(SimulationClient client) {
        if (addChallengeStubMap.get(client.getPlayer().getId()) == null) {
            final AddChallenge stub = new AddChallenge();
            addChallengeStubMap.put(client.getPlayer().getId(), stub);
        }
        return addChallengeStubMap.get(client.getPlayer().getId());
    }


}
