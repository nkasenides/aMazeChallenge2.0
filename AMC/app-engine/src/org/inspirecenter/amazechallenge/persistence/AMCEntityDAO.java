/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Framework: http://nkasenides.github.io/athlos
  Generated on: 12-08-2021 11:56:05
  Athlos Project Editor, v0.1.0 BETA
-------------------------------------------------------------------------------- */

package org.inspirecenter.amazechallenge.persistence;


import com.nkasenides.athlos.persistence.*;
import org.inspirecenter.amazechallenge.model.*;
import org.inspirecenter.amazechallenge.model.AMCEntity;
import org.inspirecenter.amazechallenge.model.PickableEntity;
import org.inspirecenter.amazechallenge.model.PlayerEntity;

import java.util.ArrayList;
import java.util.Collection;


public class AMCEntityDAO implements WorldBasedDAO<AMCEntity> {


    @Override
    public boolean create(AMCEntity object) {
        throw new RuntimeException("Not implemented");
    }

    @Override
    public boolean update(AMCEntity object) {
        throw new RuntimeException("Not implemented");
    }

    @Override
    public boolean delete(AMCEntity object) {
        throw new RuntimeException("Not implemented");
    }

    @Override
    public AMCEntity get(String itemID) {
        throw new RuntimeException("Not implemented");
    }

    @Override
    public AMCEntity getForWorld(String worldID, String itemID) {
        final PlayerEntity playerEntity = DBManager.playerEntity.getForWorld(worldID, itemID);
        if (playerEntity != null) {
            return playerEntity;
        }
        return DBManager.pickableEntity.getForWorld(worldID, itemID);
    }

    @Override
    public Collection<AMCEntity> listForWorld(String worldID) {
        final Collection<PlayerEntity> playerEntities = DBManager.playerEntity.listForWorld(worldID);
        final Collection<PickableEntity> pickableEntities = DBManager.pickableEntity.listForWorld(worldID);
        final ArrayList<AMCEntity> amcEntities = new ArrayList<>(playerEntities);
        amcEntities.addAll(pickableEntities);
        return amcEntities;
    }

/**
     * Retrieves a player's entities within a specific world.
     * @param playerID The player's ID.
     * @param worldID The world ID.
     * @return Returns a collection of entities.
     */
    public Collection<AMCEntity> listForPlayerAndWorld(String playerID, String worldID) {
        final Collection<PlayerEntity> playerEntities = DBManager.playerEntity.listForPlayerAndWorld(playerID, worldID);
        final Collection<PickableEntity> pickableEntities = DBManager.pickableEntity.listForPlayerAndWorld(playerID, worldID);
        final ArrayList<AMCEntity> amcEntities = new ArrayList<>(playerEntities);
        amcEntities.addAll(pickableEntities);
        return amcEntities;
    }
    /**
     * Retrieves a player's entities.
     * @param playerID The player.
     * @return Returns a collection of entities.
     */
    public Collection<AMCEntity> listForPlayer(String playerID) {
        final Collection<PlayerEntity> playerEntities = DBManager.playerEntity.listForPlayer(playerID);
        final Collection<PickableEntity> pickableEntities = DBManager.pickableEntity.listForPlayer(playerID);
        final ArrayList<AMCEntity> amcEntities = new ArrayList<>(playerEntities);
        amcEntities.addAll(pickableEntities);
        return amcEntities;
    }

}


