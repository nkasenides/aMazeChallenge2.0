/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Framework: http://nkasenides.github.io/athlos
  Generated on: 17-08-2021 12:37:25
  Athlos Project Editor, v0.1.0 BETA
-------------------------------------------------------------------------------- */

package org.inspirecenter.amazechallenge.servlet.admin;

import com.google.appengine.api.memcache.MemcacheService;
import com.google.appengine.api.memcache.MemcacheServiceFactory;
import org.inspirecenter.amazechallenge.model.AMCWorldSession;
import org.inspirecenter.amazechallenge.model.AdminKey;
import org.inspirecenter.amazechallenge.model.Game;
import org.inspirecenter.amazechallenge.persistence.DBManager;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

public class PerformanceServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        final String challengeID = req.getParameter("challengeID");

        if (challengeID == null || challengeID.isEmpty()) {
            resp.getWriter().write("Error: No challengeID provided");
            return;
        }

        final Object o = MemcacheServiceFactory.getMemcacheService().get("game_" + challengeID);
        if (o == null) {
            resp.getWriter().write("Error: Invalid challengeID (or perhaps the game hasn't started yet??)");
            return;
        }

        Game game = (Game) o;

        long sum = 0;

        resp.getWriter().write("Latencies (ms):" + System.lineSeparator());
        for (Long latency : game.getStateUpdateLatencies()) {
            resp.getWriter().write(latency + ",");
            sum += latency;
        }

        resp.getWriter().write(System.lineSeparator());

        double averageLatency = 0;
        if (game.getStateUpdateLatencies().size() > 0) {
            averageLatency = sum / (double) game.getStateUpdateLatencies().size();
        }

        resp.getWriter().write("Average latency (ms): " + System.lineSeparator() + averageLatency);

    }
}