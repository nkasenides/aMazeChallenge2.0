/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Framework: http://nkasenides.github.io/athlos
  Generated on: 17-08-2021 12:37:25
  Athlos Project Editor, v0.1.0 BETA
-------------------------------------------------------------------------------- */

package org.inspirecenter.amazechallenge.servlet.admin;

import org.inspirecenter.amazechallenge.generation.generator.MazeGenerator;
import org.inspirecenter.amazechallenge.model.AdminKey;
import org.inspirecenter.amazechallenge.model.Challenge;
import org.inspirecenter.amazechallenge.model.MatrixPosition;
import org.inspirecenter.amazechallenge.persistence.DBManager;
import org.inspirecenter.amazechallenge.proto.Algorithm;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class GenerateGridServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        final String algorithmStr = req.getParameter("algorithm");
        final String sizeStr = req.getParameter("size");
        final String startingPositionRowStr = req.getParameter("startingPositionRow");
        final String startingPositionColStr = req.getParameter("startingPositionCol");
        final String targetPositionRowStr = req.getParameter("targetPositionRow");
        final String targetPositionColStr = req.getParameter("targetPositionCol");

        if (algorithmStr == null) {
            resp.getWriter().write("Error: Missing algorithm.");
            return;
        }

        if (sizeStr == null) {
            resp.getWriter().write("Error: Missing size.");
            return;
        }

        if (startingPositionRowStr == null) {
            resp.getWriter().write("Error: Missing start position row.");
            return;
        }

        if (startingPositionColStr == null) {
            resp.getWriter().write("Error: Missing start position col.");
            return;
        }

        if (targetPositionRowStr == null) {
            resp.getWriter().write("Error: Missing target position row.");
            return;
        }

        if (targetPositionColStr == null) {
            resp.getWriter().write("Error: Missing target position col.");
            return;
        }

        final Algorithm algorithm;
        try {
            algorithm = Algorithm.valueOf(algorithmStr);
        } catch (Exception e) {
            resp.getWriter().write("Error: Invalid algorithm.");
            return;
        }

        int size;
        int startingPositionRow;
        int startingPositionCol;
        int targetPositionRow;
        int targetPositionCol;
        try {
            size = Integer.parseUnsignedInt(sizeStr);
            startingPositionRow = Integer.parseUnsignedInt(startingPositionRowStr);
            startingPositionCol = Integer.parseUnsignedInt(startingPositionColStr);
            targetPositionRow = Integer.parseUnsignedInt(targetPositionRowStr);
            targetPositionCol = Integer.parseUnsignedInt(targetPositionColStr);
            if (size < 5) {
                throw new NumberFormatException("Size must be >= 5.");
            }
            if (startingPositionRow < 0 || startingPositionRow > size - 1) {
                throw new Exception("Starting position must range from (0,0) to (" + (size - 1) + "," + (size - 1) + ").");
            }
            if (startingPositionCol < 0 || startingPositionCol > size - 1) {
                throw new Exception("Starting position must range from (0,0) to (" + (size - 1) + "," + (size - 1) + ").");
            }
            if (targetPositionRow < 0 || targetPositionRow > size - 1) {
                throw new Exception("Target position must range from (0,0) to (" + (size - 1) + "," + (size - 1) + ").");
            }
            if (targetPositionCol < 0 || targetPositionCol > size - 1) {
                throw new Exception("Target position must range from (0,0) to (" + (size - 1) + "," + (size - 1) + ").");
            }
            if (startingPositionRow == targetPositionRow && startingPositionCol == targetPositionCol) {
                throw new Exception("Starting and target positions must not be the same.");
            }

        } catch (Exception e) {
            resp.getWriter().write("Error: " + e.getMessage());
            return;
        }

        final String hexData = MazeGenerator.generate(algorithm, size, new MatrixPosition(startingPositionRow, startingPositionCol), new MatrixPosition(targetPositionRow, targetPositionCol));
        resp.getWriter().write(hexData);
    }
}