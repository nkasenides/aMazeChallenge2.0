/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Framework: http://nkasenides.github.io/athlos
  Generated on: 17-09-2021 11:38:42
  Athlos Project Editor, v0.1.0 BETA
-------------------------------------------------------------------------------- */

package org.inspirecenter.amazechallenge.service;
import com.google.appengine.api.memcache.MemcacheService;
import com.google.appengine.api.memcache.MemcacheServiceFactory;
import com.nkasenides.athlos.backend.AthlosService;
import org.inspirecenter.amazechallenge.model.AMCWorldSession;
import org.inspirecenter.amazechallenge.model.Challenge;
import org.inspirecenter.amazechallenge.model.Game;
import org.inspirecenter.amazechallenge.persistence.DBManager;
import org.inspirecenter.amazechallenge.persistence.KeyUtils;
import org.inspirecenter.amazechallenge.proto.GetStateResponse;
import org.inspirecenter.amazechallenge.proto.LeaveChallengeRequest;
import org.inspirecenter.amazechallenge.auth.*;
import org.inspirecenter.amazechallenge.proto.LeaveChallengeResponse;
import org.inspirecenter.amazechallenge.proto.RuntimeResponse;

public class LeaveChallenge implements AthlosService<LeaveChallengeRequest, LeaveChallengeResponse> {

    @Override    
    public LeaveChallengeResponse serve(LeaveChallengeRequest request, Object... additionalParams) {

        final String challengeID = request.getChallengeID();
        final String worldSessionID = request.getWorldSessionID();

        //Check world session ID:
        if (worldSessionID.isEmpty()) {
            return LeaveChallengeResponse.newBuilder()
                    .setStatus(LeaveChallengeResponse.Status.INVALID_WORLD_SESSION)
                    .setMessage("INVALID_WORLD_SESSION")
                    .build();
        }

        //Check challenge ID:
        if (challengeID.isEmpty()) {
            return LeaveChallengeResponse.newBuilder()
                    .setStatus(LeaveChallengeResponse.Status.INVALID_CHALLENGE)
                    .setMessage("INVALID_CHALLENGE")
                    .build();
        }

        //Verify world session:
        final AMCWorldSession worldSession = Auth.verifyWorldSessionID(worldSessionID);
        if (worldSession == null) {
            return LeaveChallengeResponse.newBuilder()
                    .setStatus(LeaveChallengeResponse.Status.INVALID_WORLD_SESSION)
                    .setMessage("INVALID_WORLD_SESSION")
                    .build();
        }

        //Verify challenge:
        final Challenge challenge = DBManager.challenge.get(challengeID);
        if (challenge == null) {
            return LeaveChallengeResponse.newBuilder()
                    .setStatus(LeaveChallengeResponse.Status.INVALID_CHALLENGE)
                    .setMessage("INVALID_CHALLENGE")
                    .build();
        }

        final MemcacheService memcache = MemcacheServiceFactory.getMemcacheService();

        //Remove the player from the game:
        final String playerID = worldSession.getPlayerID();
        final String gameID = "game_" + worldSession.getWorldID();

        memcache.delete(Runtime.getMazeSolverStateKey(gameID, playerID)); // reset algorithm's state
        memcache.delete(KeyUtils.getCodeKey(challenge.getId(), playerID)); // reset submitted code

        final Object o = memcache.get(gameID);
        if (o == null) {
            System.err.println("Invalid game");
            return LeaveChallengeResponse.newBuilder()
                    .setStatus(LeaveChallengeResponse.Status.CANNOT_LEAVE_CHALLENGE)
                    .setMessage("CANNOT_LEAVE_CHALLENGE")
                    .build();
        }

        Game game = (Game) o;

        game.resetPlayerById(playerID);
        memcache.put(game.getId(), game);

        DBManager.worldSession.delete(worldSession);

        System.out.println("Player reset: " + playerID);

        return LeaveChallengeResponse.newBuilder()
                .setStatus(LeaveChallengeResponse.Status.OK)
                .setMessage("OK")
                .build();

    }    
    
}

