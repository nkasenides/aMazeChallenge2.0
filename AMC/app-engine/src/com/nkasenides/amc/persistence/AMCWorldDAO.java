/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Framework: http://nkasenides.github.io/athlos
  Generated on: 12-08-2021 11:56:05
  Athlos Project Editor, v0.1.0 BETA
-------------------------------------------------------------------------------- */

package com.nkasenides.amc.persistence;


import com.nkasenides.athlos.persistence.*;
import com.nkasenides.amc.model.*;
import com.raylabz.firestorm.Firestorm;
import com.raylabz.firestorm.FirestormBatch;
import com.raylabz.firestorm.QueryResult;

import java.util.List;
import java.util.Collection;


public class AMCWorldDAO implements MultiDAO<AMCWorld> {


    @Override
    public boolean create(AMCWorld object) {
        Firestorm.create(object);
        return true;
    }

    @Override
    public boolean update(AMCWorld object) {
        Firestorm.update(object);
        return true;
    }

    @Override
    public boolean delete(AMCWorld object) {
        Firestorm.delete(object);
        return true;
    }

    @Override
    public AMCWorld get(String id) {
        return Firestorm.get(AMCWorld.class, id);
    }

    @Override
    public Collection<AMCWorld> getMany(String... ids) {
        return Firestorm.getMany(AMCWorld.class, ids);
    }

    @Override
    public Collection<AMCWorld> list() {
        return Firestorm.listAll(AMCWorld.class);
    }

    @Override
    public boolean create(Collection<AMCWorld> objects) {
        Firestorm.runBatch(new FirestormBatch() {
            @Override
            public void execute() {
                for (AMCWorld object : objects) {
                    create(object);
                }
            }

            @Override
            public void onFailure(Exception e) {

            }

            @Override
            public void onSuccess() {

            }
        });
        return true;
    }

    @Override
    public boolean update(Collection<AMCWorld> objects) {
        Firestorm.runBatch(new FirestormBatch() {
            @Override
            public void execute() {
                for (AMCWorld object : objects) {
                    update(object);
                }
            }

            @Override
            public void onFailure(Exception e) {

            }

            @Override
            public void onSuccess() {

            }
        });
        return true;
    }

    @Override
    public boolean delete(Collection<AMCWorld> objects) {
        Firestorm.runBatch(new FirestormBatch() {
            @Override
            public void execute() {
                for (AMCWorld object : objects) {
                    delete(object);
                }
            }

            @Override
            public void onFailure(Exception e) {

            }

            @Override
            public void onSuccess() {

            }
        });
        return true;
    }


     /**
     * Retrieve a world by name.
     * @param name The name of the world.
     * @return Returns a World object.
     */
    public AMCWorld getByName(String name) {
        final QueryResult<AMCWorld> result = Firestorm.filter(AMCWorld.class)
                .whereEqualTo("name", name)
                .limit(1)
                .fetch();
        if (result.hasItems()) {
            return result.getItems().get(0);
        }
        return null;
    }

    /**
     * Lists a player's worlds.
     * @param playerID The player.
     * @return Returns a collection of worlds.
     */
    public Collection<AMCWorld> listByPlayer(String playerID) {
        return Firestorm.filter(AMCWorld.class)
                .whereEqualTo("playerID", playerID)
                .limit(1)
                .fetch()
                .getItems();
    }

}


