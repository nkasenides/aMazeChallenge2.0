/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Framework: http://nkasenides.github.io/athlos
  Generated on: 17-08-2021 15:59:04
  Athlos Project Editor, v0.1.0 BETA
-------------------------------------------------------------------------------- */

package org.inspirecenter.amazechallenge.model;

import com.nkasenides.athlos.proto.Transmittable;
import org.inspirecenter.amazechallenge.proto.*;
import com.nkasenides.athlos.model.*;
import com.raylabz.firestorm.annotation.FirestormObject;
import org.inspirecenter.amazechallenge.proto.AMCWorldSessionProto;

import java.io.Serializable;

@FirestormObject
public class AMCWorldSession implements Transmittable<AMCWorldSessionProto.Builder>, IWorldSession, Serializable {
    private String code;    
    private String worldID;    
    private String ipAddress;    
    private MatrixPosition cameraPosition;    
    private Health health;    
    private long expiresOn;    
    private String id;    
    private long createdOn;    
    private String playerID;    
    private int points;

    public AMCWorldSession() {
        this.code = "";
        this.health = new Health();
        this.points = 0;
    }

    public String getCode() {
        return code;        
    }    
    
    public String getWorldID() {    
        return worldID;        
    }    
    
    public String getIpAddress() {    
        return ipAddress;        
    }    
    
    public MatrixPosition getCameraPosition() {    
        return cameraPosition;        
    }    
    
    public Health getHealth() {    
        return health;        
    }    
    
    public long getExpiresOn() {    
        return expiresOn;        
    }    
    
    public String getId() {    
        return id;        
    }    
    
    public long getCreatedOn() {    
        return createdOn;        
    }    
    
    public String getPlayerID() {    
        return playerID;        
    }    
    
    public int getPoints() {    
        return points;        
    }    
    

    public void setCode(String code) {    
        this.code = code;        
    }    
    
    public void setWorldID(String worldID) {    
        this.worldID = worldID;        
    }    
    
    public void setIpAddress(String ipAddress) {    
        this.ipAddress = ipAddress;        
    }    
    
    public void setCameraPosition(MatrixPosition cameraPosition) {    
        this.cameraPosition = cameraPosition;        
    }    
    
    public void setHealth(Health health) {    
        this.health = health;        
    }    
    
    public void setExpiresOn(long expiresOn) {    
        this.expiresOn = expiresOn;        
    }    
    
    public void setId(String id) {    
        this.id = id;        
    }    
    
    public void setCreatedOn(long createdOn) {    
        this.createdOn = createdOn;        
    }    
    
    public void setPlayerID(String playerID) {    
        this.playerID = playerID;        
    }    
    
    public void setPoints(int points) {    
        this.points = points;        
    }

    public void changePointsBy(int amount) {
        if (points + amount < 0) points = 0;
        else points += amount;
    }

    public void subtractPoints(int points) {
        if (points < 0) throw new RuntimeException("Cannot substract negative points.");
        else this.points -= points;
    }

    public void addPoints(int points) {
        if (points < 0) throw new RuntimeException("Cannot add negative points.");
        else this.points += points;
    }

    private void resetPoints() {
        points = 0;
    }

    @Override    
    public AMCWorldSessionProto.Builder toProto() {
        AMCWorldSessionProto.Builder protoBuilder = AMCWorldSessionProto.newBuilder();
        protoBuilder.setCode(code);        
        protoBuilder.setWorldID(worldID);        
        protoBuilder.setIpAddress(ipAddress);        
        protoBuilder.setCameraPosition(cameraPosition.toProto().build());        
        protoBuilder.setHealth(health.toProto().build());        
        protoBuilder.setExpiresOn(expiresOn);        
        protoBuilder.setId(id);        
        protoBuilder.setCreatedOn(createdOn);        
        protoBuilder.setPlayerID(playerID);        
        protoBuilder.setPoints(points);        
        return protoBuilder;        
    }

    public static String getWorldSessionID(String playerID, String challengeID) {
        return playerID + "_" + challengeID;
    }
    

}
