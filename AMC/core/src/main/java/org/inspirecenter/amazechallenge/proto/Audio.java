// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/AMCProto.proto

package org.inspirecenter.amazechallenge.proto;

/**
 * Protobuf enum {@code Audio}
 */
public enum Audio
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>EVENT_GIFTBOX_Audio = 0;</code>
   */
  EVENT_GIFTBOX_Audio(0, "Giftbox", "giftbox", AudioFormat.WAV_AudioFormat, AudioType.EVENT_AudioType),
  /**
   * <code>EVENT_COIN20_Audio = 1;</code>
   */
  EVENT_COIN20_Audio(1, "Coin20", "coin20", AudioFormat.WAV_AudioFormat, AudioType.EVENT_AudioType),
  /**
   * <code>AMBIENT_STORM_Audio = 2;</code>
   */
  AMBIENT_STORM_Audio(2, "Storm", "storm", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>EVENT_TRAP_Audio = 3;</code>
   */
  EVENT_TRAP_Audio(3, "Trap", "trap", AudioFormat.WAV_AudioFormat, AudioType.EVENT_AudioType),
  /**
   * <code>AMBIENT_NIGHT_Audio = 4;</code>
   */
  AMBIENT_NIGHT_Audio(4, "Night", "night", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>AMBIENT_SNOW_Audio = 5;</code>
   */
  AMBIENT_SNOW_Audio(5, "Snow", "snow", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>AMBIENT_ALPINE_FOREST_Audio = 6;</code>
   */
  AMBIENT_ALPINE_FOREST_Audio(6, "Alpine-Forest", "alpine_forest", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>EVENT_FOOD_Audio = 7;</code>
   */
  EVENT_FOOD_Audio(7, "Food", "food", AudioFormat.WAV_AudioFormat, AudioType.EVENT_AudioType),
  /**
   * <code>AMBIENT_RIVER_Audio = 8;</code>
   */
  AMBIENT_RIVER_Audio(8, "River", "river", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>EVENT_BOMB_Audio = 9;</code>
   */
  EVENT_BOMB_Audio(9, "Bomb", "bomb", AudioFormat.WAV_AudioFormat, AudioType.EVENT_AudioType),
  /**
   * <code>EVENT_SPEEDHACK_Audio = 10;</code>
   */
  EVENT_SPEEDHACK_Audio(10, "Speedhack", "speedhack", AudioFormat.WAV_AudioFormat, AudioType.EVENT_AudioType),
  /**
   * <code>AUDIO_NONE_Audio = 11;</code>
   */
  AUDIO_NONE_Audio(11, "None","",AudioFormat.UNDEFINED_FORMAT_AudioFormat, AudioType.NONE_AudioType),
  /**
   * <code>EVENT_COIN5_Audio = 12;</code>
   */
  EVENT_COIN5_Audio(12, "Coin5", "coin5", AudioFormat.WAV_AudioFormat, AudioType.EVENT_AudioType),
  /**
   * <code>EVENT_COIN10_Audio = 13;</code>
   */
  EVENT_COIN10_Audio(13, "Coin10", "coin10", AudioFormat.WAV_AudioFormat, AudioType.EVENT_AudioType),
  /**
   * <code>AMBIENT_CAVE_Audio = 14;</code>
   */
  AMBIENT_CAVE_Audio(14, "Cave", "cave", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>AMBIENT_PRISON_Audio = 15;</code>
   */
  AMBIENT_PRISON_Audio(15, "Prison", "prison", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>AMBIENT_SANDSTORM_Audio = 16;</code>
   */
  AMBIENT_SANDSTORM_Audio(16, "Sandstorm", "sandstorm", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>EVENT_LOSE_Audio = 17;</code>
   */
  EVENT_LOSE_Audio(17, "Lose", "lose", AudioFormat.WAV_AudioFormat, AudioType.EVENT_AudioType),
  /**
   * <code>AMBIENT_CITY_Audio = 18;</code>
   */
  AMBIENT_CITY_Audio(18, "City", "city", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>AMBIENT_STREET_Audio = 19;</code>
   */
  AMBIENT_STREET_Audio(19, "Street", "street", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>AMBIENT_TROPICAL_FOREST_Audio = 20;</code>
   */
  AMBIENT_TROPICAL_FOREST_Audio(20, "Tropical-Forest", "tropical_forest", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>AMBIENT_FIRE_Audio = 21;</code>
   */
  AMBIENT_FIRE_Audio(21, "Fire", "fire", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>EVENT_WIN_Audio = 22;</code>
   */
  EVENT_WIN_Audio(22, "Win", "win", AudioFormat.WAV_AudioFormat, AudioType.EVENT_AudioType),
  /**
   * <code>AMBIENT_HIGHTECH_Audio = 23;</code>
   */
  AMBIENT_HIGHTECH_Audio(23, "High-Tech", "high_tech", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  /**
   * <code>AMBIENT_UNDERWATER_Audio = 24;</code>
   */
  AMBIENT_UNDERWATER_Audio(24, "Underwater", "underwater", AudioFormat.MP3_AudioFormat, AudioType.AMBIENT_AudioType),
  UNRECOGNIZED(-1, "", "", AudioFormat.WAV_AudioFormat, AudioType.NONE_AudioType),
  ;

  /**
   * <code>EVENT_GIFTBOX_Audio = 0;</code>
   */
  public static final int EVENT_GIFTBOX_Audio_VALUE = 0;
  /**
   * <code>EVENT_COIN20_Audio = 1;</code>
   */
  public static final int EVENT_COIN20_Audio_VALUE = 1;
  /**
   * <code>AMBIENT_STORM_Audio = 2;</code>
   */
  public static final int AMBIENT_STORM_Audio_VALUE = 2;
  /**
   * <code>EVENT_TRAP_Audio = 3;</code>
   */
  public static final int EVENT_TRAP_Audio_VALUE = 3;
  /**
   * <code>AMBIENT_NIGHT_Audio = 4;</code>
   */
  public static final int AMBIENT_NIGHT_Audio_VALUE = 4;
  /**
   * <code>AMBIENT_SNOW_Audio = 5;</code>
   */
  public static final int AMBIENT_SNOW_Audio_VALUE = 5;
  /**
   * <code>AMBIENT_ALPINE_FOREST_Audio = 6;</code>
   */
  public static final int AMBIENT_ALPINE_FOREST_Audio_VALUE = 6;
  /**
   * <code>EVENT_FOOD_Audio = 7;</code>
   */
  public static final int EVENT_FOOD_Audio_VALUE = 7;
  /**
   * <code>AMBIENT_RIVER_Audio = 8;</code>
   */
  public static final int AMBIENT_RIVER_Audio_VALUE = 8;
  /**
   * <code>EVENT_BOMB_Audio = 9;</code>
   */
  public static final int EVENT_BOMB_Audio_VALUE = 9;
  /**
   * <code>EVENT_SPEEDHACK_Audio = 10;</code>
   */
  public static final int EVENT_SPEEDHACK_Audio_VALUE = 10;
  /**
   * <code>AUDIO_NONE_Audio = 11;</code>
   */
  public static final int AUDIO_NONE_Audio_VALUE = 11;
  /**
   * <code>EVENT_COIN5_Audio = 12;</code>
   */
  public static final int EVENT_COIN5_Audio_VALUE = 12;
  /**
   * <code>EVENT_COIN10_Audio = 13;</code>
   */
  public static final int EVENT_COIN10_Audio_VALUE = 13;
  /**
   * <code>AMBIENT_CAVE_Audio = 14;</code>
   */
  public static final int AMBIENT_CAVE_Audio_VALUE = 14;
  /**
   * <code>AMBIENT_PRISON_Audio = 15;</code>
   */
  public static final int AMBIENT_PRISON_Audio_VALUE = 15;
  /**
   * <code>AMBIENT_SANDSTORM_Audio = 16;</code>
   */
  public static final int AMBIENT_SANDSTORM_Audio_VALUE = 16;
  /**
   * <code>EVENT_LOSE_Audio = 17;</code>
   */
  public static final int EVENT_LOSE_Audio_VALUE = 17;
  /**
   * <code>AMBIENT_CITY_Audio = 18;</code>
   */
  public static final int AMBIENT_CITY_Audio_VALUE = 18;
  /**
   * <code>AMBIENT_STREET_Audio = 19;</code>
   */
  public static final int AMBIENT_STREET_Audio_VALUE = 19;
  /**
   * <code>AMBIENT_TROPICAL_FOREST_Audio = 20;</code>
   */
  public static final int AMBIENT_TROPICAL_FOREST_Audio_VALUE = 20;
  /**
   * <code>AMBIENT_FIRE_Audio = 21;</code>
   */
  public static final int AMBIENT_FIRE_Audio_VALUE = 21;
  /**
   * <code>EVENT_WIN_Audio = 22;</code>
   */
  public static final int EVENT_WIN_Audio_VALUE = 22;
  /**
   * <code>AMBIENT_HIGHTECH_Audio = 23;</code>
   */
  public static final int AMBIENT_HIGHTECH_Audio_VALUE = 23;
  /**
   * <code>AMBIENT_UNDERWATER_Audio = 24;</code>
   */
  public static final int AMBIENT_UNDERWATER_Audio_VALUE = 24;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static Audio valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Audio forNumber(int value) {
    switch (value) {
      case 0: return EVENT_GIFTBOX_Audio;
      case 1: return EVENT_COIN20_Audio;
      case 2: return AMBIENT_STORM_Audio;
      case 3: return EVENT_TRAP_Audio;
      case 4: return AMBIENT_NIGHT_Audio;
      case 5: return AMBIENT_SNOW_Audio;
      case 6: return AMBIENT_ALPINE_FOREST_Audio;
      case 7: return EVENT_FOOD_Audio;
      case 8: return AMBIENT_RIVER_Audio;
      case 9: return EVENT_BOMB_Audio;
      case 10: return EVENT_SPEEDHACK_Audio;
      case 11: return AUDIO_NONE_Audio;
      case 12: return EVENT_COIN5_Audio;
      case 13: return EVENT_COIN10_Audio;
      case 14: return AMBIENT_CAVE_Audio;
      case 15: return AMBIENT_PRISON_Audio;
      case 16: return AMBIENT_SANDSTORM_Audio;
      case 17: return EVENT_LOSE_Audio;
      case 18: return AMBIENT_CITY_Audio;
      case 19: return AMBIENT_STREET_Audio;
      case 20: return AMBIENT_TROPICAL_FOREST_Audio;
      case 21: return AMBIENT_FIRE_Audio;
      case 22: return EVENT_WIN_Audio;
      case 23: return AMBIENT_HIGHTECH_Audio;
      case 24: return AMBIENT_UNDERWATER_Audio;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Audio>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Audio> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Audio>() {
          public Audio findValueByNumber(int number) {
            return Audio.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return AMCProto.getDescriptor().getEnumTypes().get(11);
  }

  private static final Audio[] VALUES = values();

  public static Audio valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;
  private final AudioFormat audioFormat;
  private final AudioType audioType;
  private final String name;
  private final String soundResourceName;

  private Audio(int value, String name, String soundResourceName, AudioFormat audioFormat, AudioType audioType) {
    this.value = value;
    this.name =  name;
    this.soundResourceName = soundResourceName;
    this.audioFormat = audioFormat;
    this.audioType = audioType;
  }

  public AudioFormat getAudioFormat() {
    return audioFormat;
  }

  public AudioType getAudioType() {
    return audioType;
  }

  public String getName() {
    return name;
  }

  public String getSoundResourceName() {
    return soundResourceName;
  }

  public static int getIdFromString(String resourceName) {
    for (int i = 0; i < Audio.values().length; i++) {
      if (Audio.values()[i].getSoundResourceName().equals(resourceName)) return i;
    }
    throw new RuntimeException("Invalid audio resource name provided.");
  }

  // @@protoc_insertion_point(enum_scope:Audio)
}

