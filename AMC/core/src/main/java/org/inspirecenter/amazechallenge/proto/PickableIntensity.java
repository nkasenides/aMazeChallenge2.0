// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/AMCProto.proto

package org.inspirecenter.amazechallenge.proto;

/**
 * Protobuf enum {@code PickableIntensity}
 */
public enum PickableIntensity
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>HIGH_PickableIntensity = 0;</code>
   */
  HIGH_PickableIntensity(0),
  /**
   * <code>MEDIUM_PickableIntensity = 1;</code>
   */
  MEDIUM_PickableIntensity(1),
  /**
   * <code>LOW_PickableIntensity = 2;</code>
   */
  LOW_PickableIntensity(2),
  /**
   * <code>NONE_PickableIntensity = 3;</code>
   */
  NONE_PickableIntensity(3),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>HIGH_PickableIntensity = 0;</code>
   */
  public static final int HIGH_PickableIntensity_VALUE = 0;
  /**
   * <code>MEDIUM_PickableIntensity = 1;</code>
   */
  public static final int MEDIUM_PickableIntensity_VALUE = 1;
  /**
   * <code>LOW_PickableIntensity = 2;</code>
   */
  public static final int LOW_PickableIntensity_VALUE = 2;
  /**
   * <code>NONE_PickableIntensity = 3;</code>
   */
  public static final int NONE_PickableIntensity_VALUE = 3;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static PickableIntensity valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static PickableIntensity forNumber(int value) {
    switch (value) {
      case 0: return HIGH_PickableIntensity;
      case 1: return MEDIUM_PickableIntensity;
      case 2: return LOW_PickableIntensity;
      case 3: return NONE_PickableIntensity;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PickableIntensity>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      PickableIntensity> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PickableIntensity>() {
          public PickableIntensity findValueByNumber(int number) {
            return PickableIntensity.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return AMCProto.getDescriptor().getEnumTypes().get(15);
  }

  private static final PickableIntensity[] VALUES = values();

  public static PickableIntensity valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private PickableIntensity(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:PickableIntensity)
}

