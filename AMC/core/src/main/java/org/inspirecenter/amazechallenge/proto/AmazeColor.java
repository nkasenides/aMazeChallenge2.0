// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/AMCProto.proto

package org.inspirecenter.amazechallenge.proto;

/**
 * Protobuf enum {@code AmazeColor}
 */
public enum AmazeColor
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>GOLD_AmazeColor = 0;</code>
   */
  GOLD_AmazeColor(0, "#996600", "color_gold"),
  /**
   * <code>BLUE_AmazeColor = 1;</code>
   */
  BLUE_AmazeColor(1, "#0000ff", "color_blue"),
  /**
   * <code>PURPLE_AmazeColor = 2;</code>
   */
  PURPLE_AmazeColor(2, "#990099", "color_purple"),
  /**
   * <code>GREEN_AmazeColor = 3;</code>
   */
  GREEN_AmazeColor(3, "#00cc00", "color_green"),
  /**
   * <code>DARK_BLUE_AmazeColor = 4;</code>
   */
  DARK_BLUE_AmazeColor(4, "#000066", "color_darkblue"),
  /**
   * <code>INDIGO_AmazeColor = 5;</code>
   */
  INDIGO_AmazeColor(5, "#6600cc", "color_indigo"),
  /**
   * <code>RED_AmazeColor = 6;</code>
   */
  RED_AmazeColor(6, "#ff0000", "color_red"),
  /**
   * <code>LIGHT_GREY_AmazeColor = 7;</code>
   */
  LIGHT_GREY_AmazeColor(7, "#cccccc", "color_lightgray"),
  /**
   * <code>PINK_AmazeColor = 8;</code>
   */
  PINK_AmazeColor(8, "#ffb6c1", "color_pink"),
  /**
   * <code>LIME_AmazeColor = 9;</code>
   */
  LIME_AmazeColor(9, "#00ff00", "color_lime"),
  /**
   * <code>DARK_RED_AmazeColor = 10;</code>
   */
  DARK_RED_AmazeColor(10, "#CC0000", "color_darkred"),
  /**
   * <code>DARK_GREY_AmazeColor = 11;</code>
   */
  DARK_GREY_AmazeColor(11, "#333333", "color_darkgray"),
  /**
   * <code>BLACK_AmazeColor = 12;</code>
   */
  BLACK_AmazeColor(12, "#000000", "color_black"),
  /**
   * <code>MAGENTA_AmazeColor = 13;</code>
   */
  MAGENTA_AmazeColor(13, "#ff00ff", "color_magenta"),
  /**
   * <code>YELLOW_AmazeColor = 14;</code>
   */
  YELLOW_AmazeColor(14, "#dddd00", "color_yellow"),
  /**
   * <code>DARK_GREEN_AmazeColor = 15;</code>
   */
  DARK_GREEN_AmazeColor(15, "#006600", "color_darkgreen"),
  /**
   * <code>TEAL_AmazeColor = 16;</code>
   */
  TEAL_AmazeColor(16, "#00cc99", "color_teal"),
  /**
   * <code>CYAN_AmazeColor = 17;</code>
   */
  CYAN_AmazeColor(17, "#00ffff", "color_cyan"),
  /**
   * <code>GREY_AmazeColor = 18;</code>
   */
  GREY_AmazeColor(18, "#666666", "color_darkgray"),
  /**
   * <code>ORANGE_AmazeColor = 19;</code>
   */
  ORANGE_AmazeColor(19, "#ff6600", "color_orange"),
  UNRECOGNIZED(-1, "#000000", "color_black"),
  ;

  /**
   * <code>GOLD_AmazeColor = 0;</code>
   */
  public static final int GOLD_AmazeColor_VALUE = 0;
  /**
   * <code>BLUE_AmazeColor = 1;</code>
   */
  public static final int BLUE_AmazeColor_VALUE = 1;
  /**
   * <code>PURPLE_AmazeColor = 2;</code>
   */
  public static final int PURPLE_AmazeColor_VALUE = 2;
  /**
   * <code>GREEN_AmazeColor = 3;</code>
   */
  public static final int GREEN_AmazeColor_VALUE = 3;
  /**
   * <code>DARK_BLUE_AmazeColor = 4;</code>
   */
  public static final int DARK_BLUE_AmazeColor_VALUE = 4;
  /**
   * <code>INDIGO_AmazeColor = 5;</code>
   */
  public static final int INDIGO_AmazeColor_VALUE = 5;
  /**
   * <code>RED_AmazeColor = 6;</code>
   */
  public static final int RED_AmazeColor_VALUE = 6;
  /**
   * <code>LIGHT_GREY_AmazeColor = 7;</code>
   */
  public static final int LIGHT_GREY_AmazeColor_VALUE = 7;
  /**
   * <code>PINK_AmazeColor = 8;</code>
   */
  public static final int PINK_AmazeColor_VALUE = 8;
  /**
   * <code>LIME_AmazeColor = 9;</code>
   */
  public static final int LIME_AmazeColor_VALUE = 9;
  /**
   * <code>DARK_RED_AmazeColor = 10;</code>
   */
  public static final int DARK_RED_AmazeColor_VALUE = 10;
  /**
   * <code>DARK_GREY_AmazeColor = 11;</code>
   */
  public static final int DARK_GREY_AmazeColor_VALUE = 11;
  /**
   * <code>BLACK_AmazeColor = 12;</code>
   */
  public static final int BLACK_AmazeColor_VALUE = 12;
  /**
   * <code>MAGENTA_AmazeColor = 13;</code>
   */
  public static final int MAGENTA_AmazeColor_VALUE = 13;
  /**
   * <code>YELLOW_AmazeColor = 14;</code>
   */
  public static final int YELLOW_AmazeColor_VALUE = 14;
  /**
   * <code>DARK_GREEN_AmazeColor = 15;</code>
   */
  public static final int DARK_GREEN_AmazeColor_VALUE = 15;
  /**
   * <code>TEAL_AmazeColor = 16;</code>
   */
  public static final int TEAL_AmazeColor_VALUE = 16;
  /**
   * <code>CYAN_AmazeColor = 17;</code>
   */
  public static final int CYAN_AmazeColor_VALUE = 17;
  /**
   * <code>GREY_AmazeColor = 18;</code>
   */
  public static final int GREY_AmazeColor_VALUE = 18;
  /**
   * <code>ORANGE_AmazeColor = 19;</code>
   */
  public static final int ORANGE_AmazeColor_VALUE = 19;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static AmazeColor valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static AmazeColor forNumber(int value) {
    switch (value) {
      case 0: return GOLD_AmazeColor;
      case 1: return BLUE_AmazeColor;
      case 2: return PURPLE_AmazeColor;
      case 3: return GREEN_AmazeColor;
      case 4: return DARK_BLUE_AmazeColor;
      case 5: return INDIGO_AmazeColor;
      case 6: return RED_AmazeColor;
      case 7: return LIGHT_GREY_AmazeColor;
      case 8: return PINK_AmazeColor;
      case 9: return LIME_AmazeColor;
      case 10: return DARK_RED_AmazeColor;
      case 11: return DARK_GREY_AmazeColor;
      case 12: return BLACK_AmazeColor;
      case 13: return MAGENTA_AmazeColor;
      case 14: return YELLOW_AmazeColor;
      case 15: return DARK_GREEN_AmazeColor;
      case 16: return TEAL_AmazeColor;
      case 17: return CYAN_AmazeColor;
      case 18: return GREY_AmazeColor;
      case 19: return ORANGE_AmazeColor;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<AmazeColor>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      AmazeColor> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<AmazeColor>() {
          public AmazeColor findValueByNumber(int number) {
            return AmazeColor.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return AMCProto.getDescriptor().getEnumTypes().get(6);
  }

  private static final AmazeColor[] VALUES = values();

  public static AmazeColor valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;
  private final String hexCode;
  private final String resourceIdAsString;

  private AmazeColor(int value, String hexCode, String resourceIdAsString) {
    this.value = value;
    this.hexCode = hexCode;
    this.resourceIdAsString = resourceIdAsString;
  }

  public String getHexCode() {
    return hexCode;
  }

  public String getResourceIdAsString() {
    return resourceIdAsString;
  }

  public static int getIndex(final AmazeColor amazeColor) {
    final AmazeColor [] amazeColors = values();
    for(int i = 0; i < amazeColors.length; i++) {
      if(amazeColors[i] == amazeColor) {
        return i;
      }
    }
    return -1;
  }

  // @@protoc_insertion_point(enum_scope:AmazeColor)
}

