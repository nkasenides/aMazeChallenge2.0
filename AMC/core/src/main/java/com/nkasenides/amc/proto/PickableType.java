// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/AMCProto.proto

package com.nkasenides.amc.proto;

import java.util.Collections;
import java.util.Vector;

/**
 * Protobuf enum {@code com.nkasenides.amc.proto.PickableType}
 */
public enum PickableType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>GRAPES_PickableType = 0;</code>
   */
  GRAPES_PickableType(0, "grapes", Bias.REWARD_Bias, PickableCategory.FRUIT_PickableCategory, "Grapes reward +25 health", 25, 0, 7),
  /**
   * <code>APPLE_PickableType = 1;</code>
   */
  APPLE_PickableType(1, "apple", Bias.REWARD_Bias, PickableCategory.FRUIT_PickableCategory, "Apple reward +30 health", 30, 0, 7),
  /**
   * <code>TRAP_PickableType = 2;</code>
   */
  TRAP_PickableType(2, "trap", Bias.PENALTY_Bias, PickableCategory.NONE_PickableCategory, "Player loses 1 move", 0, 0, 15),
  /**
   * <code>WATERMELON_PickableType = 3;</code>
   */
  WATERMELON_PickableType(3, "watermelon", Bias.REWARD_Bias, PickableCategory.FRUIT_PickableCategory, "Watermelon reward +20 health", 20, 0, 10),
  /**
   * <code>SPEEDHACK_PickableType = 4;</code>
   */
  SPEEDHACK_PickableType(4, "doublemoves", Bias.REWARD_Bias, PickableCategory.NONE_PickableCategory, "Player gets to do 2 moves", 0, 0, 15),
  /**
   * <code>COIN_10_PickableType = 5;</code>
   */
  COIN_10_PickableType(5, "coin10", Bias.REWARD_Bias, PickableCategory.NONE_PickableCategory, "Coin reward +10 points", 0, 10, 8),
  /**
   * <code>COIN_20_PickableType = 6;</code>
   */
  COIN_20_PickableType(6, "coin20", Bias.REWARD_Bias, PickableCategory.NONE_PickableCategory, "Coin reward +20 points", 0, 20, 6),
  /**
   * <code>PEACH_PickableType = 7;</code>
   */
  PEACH_PickableType(7, "peach", Bias.REWARD_Bias, PickableCategory.FRUIT_PickableCategory, "Peach reward +5 health", 5, 0, 10),
  /**
   * <code>GIFTBOX_PickableType = 8;</code>
   */
  GIFTBOX_PickableType(8, "giftbox", Bias.REWARD_Bias, PickableCategory.NONE_PickableCategory, "Gift reward +50 points", 0, 50, 5),
  /**
   * <code>COIN_5_PickableType = 9;</code>
   */
  COIN_5_PickableType(9, "coin5", Bias.REWARD_Bias, PickableCategory.NONE_PickableCategory, "Coin reward +5 points", 0, 5, 10),
  /**
   * <code>BANANA_PickableType = 10;</code>
   */
  BANANA_PickableType(10, "banana", Bias.REWARD_Bias, PickableCategory.FRUIT_PickableCategory, "Banana reward +15 health", 15, 0, 10),
  /**
   * <code>BOMB_PickableType = 11;</code>
   */
  BOMB_PickableType(11, "bomb", Bias.PENALTY_Bias, PickableCategory.NONE_PickableCategory, "Bomb penalty -50 health", 100, 0, 10),
  /**
   * <code>STRAWBERRY_PickableType = 12;</code>
   */
  STRAWBERRY_PickableType(12, "strawberry", Bias.REWARD_Bias, PickableCategory.FRUIT_PickableCategory, "Strawberry reward +10 health", 10, 0, 10),
  /**
   * <code>ORANGE_PickableType = 13;</code>
   */
  ORANGE_PickableType(13, "orange", Bias.REWARD_Bias, PickableCategory.FRUIT_PickableCategory, "Orange reward +50 health", 50, 0, 7),
  UNRECOGNIZED(-1, "", Bias.NONE_Bias, PickableCategory.NONE_PickableCategory, "", 0, 0, 0),
  ;

  /**
   * <code>GRAPES_PickableType = 0;</code>
   */
  public static final int GRAPES_PickableType_VALUE = 0;
  /**
   * <code>APPLE_PickableType = 1;</code>
   */
  public static final int APPLE_PickableType_VALUE = 1;
  /**
   * <code>TRAP_PickableType = 2;</code>
   */
  public static final int TRAP_PickableType_VALUE = 2;
  /**
   * <code>WATERMELON_PickableType = 3;</code>
   */
  public static final int WATERMELON_PickableType_VALUE = 3;
  /**
   * <code>SPEEDHACK_PickableType = 4;</code>
   */
  public static final int SPEEDHACK_PickableType_VALUE = 4;
  /**
   * <code>COIN_10_PickableType = 5;</code>
   */
  public static final int COIN_10_PickableType_VALUE = 5;
  /**
   * <code>COIN_20_PickableType = 6;</code>
   */
  public static final int COIN_20_PickableType_VALUE = 6;
  /**
   * <code>PEACH_PickableType = 7;</code>
   */
  public static final int PEACH_PickableType_VALUE = 7;
  /**
   * <code>GIFTBOX_PickableType = 8;</code>
   */
  public static final int GIFTBOX_PickableType_VALUE = 8;
  /**
   * <code>COIN_5_PickableType = 9;</code>
   */
  public static final int COIN_5_PickableType_VALUE = 9;
  /**
   * <code>BANANA_PickableType = 10;</code>
   */
  public static final int BANANA_PickableType_VALUE = 10;
  /**
   * <code>BOMB_PickableType = 11;</code>
   */
  public static final int BOMB_PickableType_VALUE = 11;
  /**
   * <code>STRAWBERRY_PickableType = 12;</code>
   */
  public static final int STRAWBERRY_PickableType_VALUE = 12;
  /**
   * <code>ORANGE_PickableType = 13;</code>
   */
  public static final int ORANGE_PickableType_VALUE = 13;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static PickableType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static PickableType forNumber(int value) {
    switch (value) {
      case 0: return GRAPES_PickableType;
      case 1: return APPLE_PickableType;
      case 2: return TRAP_PickableType;
      case 3: return WATERMELON_PickableType;
      case 4: return SPEEDHACK_PickableType;
      case 5: return COIN_10_PickableType;
      case 6: return COIN_20_PickableType;
      case 7: return PEACH_PickableType;
      case 8: return GIFTBOX_PickableType;
      case 9: return COIN_5_PickableType;
      case 10: return BANANA_PickableType;
      case 11: return BOMB_PickableType;
      case 12: return STRAWBERRY_PickableType;
      case 13: return ORANGE_PickableType;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PickableType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      PickableType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PickableType>() {
          public PickableType findValueByNumber(int number) {
            return PickableType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return AMCProto.getDescriptor().getEnumTypes().get(12);
  }

  private static final PickableType[] VALUES = values();

  public static PickableType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  //Added for aMazeChallenge:
  private final String imageResourceName;
  private final Bias bias;
  private final PickableCategory category;
  private final String description;
  private final int absoluteHealth;
  private final int absolutePoints;
  private final int defaultState;

  public static int SPEEDHACK_TURNS_AMOUNT = 5;
  public static int TRAP_TURNS_AMOUNT = 5;


  private PickableType(int value, String imageResourceName, Bias bias, PickableCategory category, String description, int absoluteHealth, int absolutePoints, int defaultState) {
    this.value = value;
    this.imageResourceName = imageResourceName;
    this.bias = bias;
    this.category = category;
    this.description = description;
    this.absoluteHealth = absoluteHealth;
    this.absolutePoints = absolutePoints;
    this.defaultState = defaultState;
  }

  public static PickableType getRandomReward() {
    final Vector<PickableType> selected = new Vector<>();
    for (PickableType pickableType : values()) {
      if(pickableType.bias == Bias.REWARD_Bias) {
        selected.add(pickableType);
      }
    }
    if(selected.isEmpty()) throw new RuntimeException("Invalid selection criteria: " + Bias.REWARD_Bias.name());
    Collections.shuffle(selected);
    return selected.firstElement();
  }

  public static PickableType getRandomPenalty() {
    return random(Bias.PENALTY_Bias, PickableCategory.NONE_PickableCategory);
  }

  public static PickableType random(Bias bias, PickableCategory category) {
    final Vector<PickableType> selected = new Vector<>();
    for (PickableType pickableType : values()) {
      if(pickableType.bias == bias && pickableType.category == category) {
        selected.add(pickableType);
      }
    }
    if(selected.isEmpty()) throw new RuntimeException("Invalid selection criteria: " + bias + ", " + category);
    Collections.shuffle(selected);
    return selected.firstElement();
  }

  public String getImageResourceName() {
    return imageResourceName;
  }

  public Bias getBias() {
    return bias;
  }

  public PickableCategory getCategory() {
    return category;
  }

  public String getDescription() {
    return description;
  }

  public int getAbsoluteHealth() {
    return absoluteHealth;
  }

  public int getAbsolutePoints() {
    return absolutePoints;
  }

  public int getDefaultState() {
    return defaultState;
  }

  public int getPointsChange() {
    return bias == Bias.REWARD_Bias ? absolutePoints : -absolutePoints;
  }

  public int getHealthChange() {
    return bias == Bias.REWARD_Bias ? absoluteHealth: -absoluteHealth;
  }

  // @@protoc_insertion_point(enum_scope:com.nkasenides.amc.proto.PickableType)
}

